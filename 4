#pragma once

#include "warpunk.core/defines.h"
#include "warpunk.core/math/v3.hpp"

enum material_type_t
{
    LAMBERT,
    METAL,
};

template<typename T>
struct material_t 
{
    material_type_t type;    
    v3_t<T> color;
};

template<typename T>
inline b8 
scatter(material_t<T>* material,
        const ray_t<T>* ray, const struct hit_record_t<T>* record, v3_t<T> attenuation, ray_t<T>* scattered)
{
    if (material)
    {
        switch (material->type)
        {
            case LAMBERT:
            {
                lambert::scatter()
                auto scatter_direction = record->normal + random_unit_vector<T>();

            } break;
            case METAL:
            {

            } break;
        
        }
    }

    return false;
}
